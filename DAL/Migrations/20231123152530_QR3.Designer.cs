// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(QRDbContext))]
    [Migration("20231123152530_QR3")]
    partial class QR3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProfileID")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("RoleID")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DAL.Models.OrderDetails", b =>
                {
                    b.Property<string>("OrderDetailsID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OrderHeaderID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailsID");

                    b.HasIndex("OrderHeaderID");

                    b.HasIndex("ProductID");

                    b.ToTable("orderDetails");
                });

            modelBuilder.Entity("DAL.Models.OrderHeader", b =>
                {
                    b.Property<string>("OrderHeaderID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<string>("TableID")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<double>("VAT")
                        .HasColumnType("float");

                    b.HasKey("OrderHeaderID");

                    b.HasIndex("TableID");

                    b.ToTable("orderHeader");
                });

            modelBuilder.Entity("DAL.Models.Products", b =>
                {
                    b.Property<string>("ProductID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInStock")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ProductID");

                    b.ToTable("products");
                });

            modelBuilder.Entity("DAL.Models.Profile", b =>
                {
                    b.Property<string>("ProfileID")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IdentifyCard")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("StaffShifts")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ProfileID");

                    b.ToTable("profiles");
                });

            modelBuilder.Entity("DAL.Models.Role", b =>
                {
                    b.Property<string>("RoleID")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleID");

                    b.ToTable("role");
                });

            modelBuilder.Entity("DAL.Models.Table", b =>
                {
                    b.Property<string>("TableID")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TableID");

                    b.ToTable("tables");
                });

            modelBuilder.Entity("DAL.Models.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("OrderHeaderID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("VoucherTypeID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("VoucherID");

                    b.HasIndex("OrderHeaderID");

                    b.HasIndex("VoucherTypeID");

                    b.ToTable("voucher");
                });

            modelBuilder.Entity("DAL.Models.VoucherType", b =>
                {
                    b.Property<string>("VoucherTypeID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoucherName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("VoucherTypeID");

                    b.ToTable("voucherType");
                });

            modelBuilder.Entity("DAL.Models.Account", b =>
                {
                    b.HasOne("DAL.Models.Role", "RoleEnity")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleEnity");
                });

            modelBuilder.Entity("DAL.Models.OrderDetails", b =>
                {
                    b.HasOne("DAL.Models.OrderHeader", "OrderHeaderEnity")
                        .WithMany("orderDetails")
                        .HasForeignKey("OrderHeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Products", "Product")
                        .WithMany("orderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeaderEnity");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DAL.Models.OrderHeader", b =>
                {
                    b.HasOne("DAL.Models.Table", "TableEnity")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("TableID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TableEnity");
                });

            modelBuilder.Entity("DAL.Models.Profile", b =>
                {
                    b.HasOne("DAL.Models.Account", "Account")
                        .WithOne("Profile")
                        .HasForeignKey("DAL.Models.Profile", "ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DAL.Models.Voucher", b =>
                {
                    b.HasOne("DAL.Models.OrderHeader", "OrderHeaderEnity")
                        .WithMany("Vouchers")
                        .HasForeignKey("OrderHeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.VoucherType", "VoucherTypeEnity")
                        .WithMany("Vouchers")
                        .HasForeignKey("VoucherTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeaderEnity");

                    b.Navigation("VoucherTypeEnity");
                });

            modelBuilder.Entity("DAL.Models.Account", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.OrderHeader", b =>
                {
                    b.Navigation("Vouchers");

                    b.Navigation("orderDetails");
                });

            modelBuilder.Entity("DAL.Models.Products", b =>
                {
                    b.Navigation("orderDetails");
                });

            modelBuilder.Entity("DAL.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("DAL.Models.Table", b =>
                {
                    b.Navigation("OrderHeaders");
                });

            modelBuilder.Entity("DAL.Models.VoucherType", b =>
                {
                    b.Navigation("Vouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
